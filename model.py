import numpy as np 

def solve_model(T,state):
    X1, X2, Y, X3 = state
    dX1 = -X1*0
    dX2 = -X2*0
    dY = -Y*0.1+10*(((X1/5)**3))/(1+((X1/5)**3)+((X2/5)**2)+((X1/5)**3)*((X2/5)**2))+10*(((X1/5)**3))/(1+((X3/4)**4)+((X2/5)**2)+((X1/5)**3)+((X3/4)**4)*((X2/5)**2)+((X3/4)**4)*((X1/5)**3)+((X2/5)**2)*((X1/5)**3)+((X3/4)**4)*((X2/5)**2)*((X1/5)**3))+4*(((X1/5)**3))/(1+((X1/5)**3)+((X2/5)**2)+((X3/4)**4)+((X1/5)**3)*((X2/5)**2)+((X1/5)**3)*((X3/4)**4)+((X2/5)**2)*((X3/4)**4)+((X1/5)**3)*((X2/5)**2)*((X3/4)**4))
    dX3 = -X3*0
    return np.array([dX1, dX2, dY, dX3])

def solve_model_steady(state):
    return solve_model(0, state)
